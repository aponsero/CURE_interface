max_parents <- all_fam_wide %>% filter(all_parents==5) %>% tally()%>%
rename("all parents"="n")
max_all <- all_fam_wide %>% filter(all_main==46) %>% tally()%>%
rename("all major questionnaires"="n")
max_infreg <- all_fam_wide %>% filter(all_reg==38 & all_inf==3) %>% tally()%>%
rename("all major infants and frequency"="n")
most_infreg <- all_fam_wide %>% filter(all_reg>=35 & all_inf==3) %>% tally()%>%
rename("all major infants and most frequency"="n")
table_out <- max_inf %>% add_column(max_reg) %>%
add_column(max_parents) %>%
add_column(max_all) %>%
add_column(max_infreg) %>%
add_column(most_infreg) %>%
pivot_longer(everything(), names_to="measures", values_to="nb families")
knitr::kable(table_out)
# libraries
library("readxl")
library("tidyverse")
library("ggridges")
# Load the spreadsheets
Voc <- read_excel("../questionnaire_vocabulary.xlsx")
Q1 <- read_csv("../normalized_versions/corrected_translated/Q1_norm_background_04.10.18.csv") %>%
add_column(questionnaire="A_background")
Q2 <- read_csv("../normalized_versions/corrected_translated/Q2_norm_Previous3months_15.08.20.csv") %>%
add_column(questionnaire="E_Previous3Months")
Q3 <- read_csv("../normalized_versions/corrected_translated/Q3_norm_4to6months_26.01.20.csv") %>%
add_column(questionnaire="C_4to6months")
Q4 <- read_csv("../normalized_versions/corrected_translated/Q4_norm_7to12months_27.01.21.csv") %>%
add_column(questionnaire="D_7to12months")
Q5y1 <- read_csv("../normalized_versions/corrected_translated/Q5_norm_NutritionMotorDev_v2_yearI_28.01.21.csv") %>%
add_column(questionnaire="F1_NutritionMotorDev_year1_Version2")
Q5y2 <- read_csv("../normalized_versions/corrected_translated/Q5_norm_NutritionMotorDev_v2_yearII_28.01.21.csv") %>%
add_column(questionnaire="F2_NutritionMotorDev_year2_Version2")
Q5y1B <- read_csv("../normalized_versions/corrected_translated/Q5_norm_NutritionMotorDev_yearI_27.01.21.csv") %>%
add_column(questionnaire="F1_NutritionMotorDev_year1_Version1")
Q5y2B <- read_csv("../normalized_versions/corrected_translated/Q5_norm_NutritionMotorDev_yearII_28.01.21.csv") %>%
add_column(questionnaire="F2_NutritionMotorDev_year2_Version1")
Q6F <- read_csv("../normalized_versions/corrected_translated/Q6_norm_ParentsF_FoodFrequency_28.01.21.csv") %>%
add_column(questionnaire="G_ParentF_FoodFrequency")
Q6M <- read_csv("../normalized_versions/corrected_translated/Q6_norm_ParentsM_FoodFrequency_28.01.21.csv") %>%
add_column(questionnaire="G_ParentM_FoodFrequency")
Q7 <- read_csv("../normalized_versions/corrected_translated/Q7_norm_depression_unkown.csv") %>%
add_column(questionnaire="G_MotherDepression")
Q8 <- read_csv("../normalized_versions/corrected_translated/Q8_norm_HouseDustCollection_28.01.21.csv") %>%
add_column(questionnaire="H_HouseCollection")
Q9 <- read_csv("../normalized_versions/corrected_translated/Q9_norm_0to3 months_02.02.2020.csv") %>%
add_column(questionnaire="B_0to3months")
curr_Voc <- Voc %>% filter(Questionnaire=="F2_NutritionMotorDev_yearII_Version1")
# Looking at boolean fields
bool_fields <- curr_Voc %>% filter(data_type=="bool") %>% pull(variable_short_name)
curr_bool <- Q5y1B %>% select(familly_ID, all_of(bool_fields))
curr_bool_long <- curr_bool %>% pivot_longer(!familly_ID, names_to="question", values_to="answers")
curr_bool_counts <- curr_bool_long %>% group_by(question, answers) %>% tally()
plotbools <- curr_bool_counts %>% ggplot(aes(x=question, y=n, fill=answers)) +
geom_bar(stat="identity")+
coord_flip() +
theme(legend.position="bottom",
text = element_text(size=10))
plotbools
curr_Voc <- Voc %>% filter(Questionnaire=="F2_NutritionMotorDev_yearII_Version1")
# Looking at boolean fields
cat_fields <- curr_Voc %>% filter(data_type=="categorical") %>%
pull(variable_short_name)
curr_cat <- Q5y1B %>% select(familly_ID, all_of(cat_fields)) %>% mutate_all(as.character)
curr_cat_long <- curr_cat %>% pivot_longer(!familly_ID, names_to="question", values_to="answers")
curr_cat_counts <- curr_cat_long %>% group_by(question, answers) %>% tally()
# categories from 1 to 10
plotcat <- curr_cat_counts %>% ggplot(aes(x=question, y=n, fill=answers)) +
geom_bar(stat="identity")+
coord_flip() +
theme(legend.position="bottom",
text = element_text(size=10))
plotcat
curr_Voc <- Voc %>% filter(Questionnaire=="F2_NutritionMotorDev_yearII_Version1")
# Looking at boolean fields
bool_fields <- curr_Voc %>% filter(data_type=="bool") %>% pull(variable_short_name)
curr_bool <- Q5y2B %>% select(familly_ID, all_of(bool_fields))
curr_bool_long <- curr_bool %>% pivot_longer(!familly_ID, names_to="question", values_to="answers")
curr_bool_counts <- curr_bool_long %>% group_by(question, answers) %>% tally()
plotbools <- curr_bool_counts %>% ggplot(aes(x=question, y=n, fill=answers)) +
geom_bar(stat="identity")+
coord_flip() +
theme(legend.position="bottom",
text = element_text(size=10))
plotbools
View(Q5y2B)
View(curr_bool)
View(curr_bool)
curr_Voc <- Voc %>% filter(Questionnaire=="F2_NutritionMotorDev_yearII_Version1")
# Looking at boolean fields
bool_fields <- curr_Voc %>% filter(data_type=="bool") %>% pull(variable_short_name)
curr_bool <- Q5y2B %>% select(familly_ID, all_of(bool_fields))
curr_bool_long <- curr_bool %>% pivot_longer(!familly_ID, names_to="question", values_to="answers")
curr_bool_counts <- curr_bool_long %>% group_by(question, answers) %>% tally()
curr_Voc <- Voc %>% filter(Questionnaire=="F2_NutritionMotorDev_yearII_Version1")
# Looking at boolean fields
cat_fields <- curr_Voc %>% filter(data_type=="categorical") %>%
pull(variable_short_name)
curr_cat <- Q5y2B %>% select(familly_ID, all_of(cat_fields)) %>% mutate_all(as.character)
curr_cat_long <- curr_cat %>% pivot_longer(!familly_ID, names_to="question", values_to="answers")
curr_cat_counts <- curr_cat_long %>% group_by(question, answers) %>% tally()
# categories from 1 to 10
plotcat <- curr_cat_counts %>% ggplot(aes(x=question, y=n, fill=answers)) +
geom_bar(stat="identity")+
coord_flip() +
theme(legend.position="bottom",
text = element_text(size=10))
plotcat
curr_Voc <- Voc %>% filter(Questionnaire=="F2_NutritionMotorDev_yearII_Version1")
# Looking at int fields
int_fields <- curr_Voc %>% filter(data_type=="int") %>%
filter(variable_short_name != "inf_Age") %>%
filter(variable_short_name != "inf_AgeDays") %>%
filter(variable_short_name != "inf_AgeWeeks") %>%
filter(usability!="EMPTY") %>%
pull(variable_short_name)
curr_int <- Q5y2B %>% select(all_of(int_fields)) %>%
mutate_if(is.character,as.numeric)
ggplot(gather(curr_int), aes(value)) +
geom_histogram() +
facet_wrap(~key, scales = 'free')
# checking type of data
type_check <-  curr_int %>%
dplyr::summarise_all(class) %>%
tidyr::gather(variable, class)
curr_Voc <- Voc %>% filter(Questionnaire=="F1_NutritionMotorDev_yearI_Version2")
# Looking at boolean fields
bool_fields <- curr_Voc %>% filter(data_type=="bool") %>% pull(variable_short_name)
curr_bool <- Q5y1 %>% select(familly_ID, all_of(bool_fields))
curr_bool_long <- curr_bool %>% pivot_longer(!familly_ID, names_to="question", values_to="answers")
curr_bool_counts <- curr_bool_long %>% group_by(question, answers) %>% tally()
plotbools <- curr_bool_counts %>% ggplot(aes(x=question, y=n, fill=answers)) +
geom_bar(stat="identity")+
coord_flip() +
theme(legend.position="bottom",
text = element_text(size=10))
plotbools
curr_Voc <- Voc %>% filter(Questionnaire=="F1_NutritionMotorDev_yearI_Version2")
# Looking at boolean fields
cat_fields <- curr_Voc %>% filter(data_type=="categorical") %>%
pull(variable_short_name)
curr_cat <- Q5y1 %>% select(familly_ID, all_of(cat_fields)) %>% mutate_all(as.character)
curr_cat_long <- curr_cat %>% pivot_longer(!familly_ID, names_to="question", values_to="answers")
curr_cat_counts <- curr_cat_long %>% group_by(question, answers) %>% tally()
# categories from 1 to 10
plotcat <- curr_cat_counts %>% ggplot(aes(x=question, y=n, fill=answers)) +
geom_bar(stat="identity")+
coord_flip() +
theme(legend.position="bottom",
text = element_text(size=10))
plotcat
View(curr_cat)
curr_Voc <- Voc %>% filter(Questionnaire=="F1_NutritionMotorDev_yearI_Version2")
# Looking at boolean fields
cat_fields <- curr_Voc %>% filter(data_type=="categorical") %>% filter(variable_short_name!="inf_PeriodFormula") %>%
pull(variable_short_name)
curr_cat <- Q5y1 %>% select(familly_ID, all_of(cat_fields)) %>% mutate_all(as.character)
curr_cat_long <- curr_cat %>% pivot_longer(!familly_ID, names_to="question", values_to="answers")
curr_cat_counts <- curr_cat_long %>% group_by(question, answers) %>% tally()
# categories from 1 to 10
plotcat <- curr_cat_counts %>% ggplot(aes(x=question, y=n, fill=answers)) +
geom_bar(stat="identity")+
coord_flip() +
theme(legend.position="bottom",
text = element_text(size=10))
plotcat
curr_Voc <- Voc %>% filter(Questionnaire=="F1_NutritionMotorDev_yearI_Version2")
# Looking at int fields
int_fields <- curr_Voc %>% filter(data_type=="int") %>%
filter(variable_short_name != "inf_Age") %>%
filter(variable_short_name != "inf_AgeDays") %>%
filter(variable_short_name != "inf_AgeWeeks") %>%
filter(usability!="EMPTY") %>%
pull(variable_short_name)
curr_int <- Q5y2B %>% select(all_of(int_fields)) %>%
mutate_if(is.character,as.numeric)
curr_Voc <- Voc %>% filter(Questionnaire=="F1_NutritionMotorDev_yearI_Version2")
# Looking at int fields
int_fields <- curr_Voc %>% filter(data_type=="int") %>%
filter(variable_short_name != "inf_Age") %>%
filter(variable_short_name != "inf_AgeDays") %>%
filter(variable_short_name != "inf_AgeWeeks") %>%
filter(usability!="EMPTY") %>%
pull(variable_short_name)
curr_int <- Q5y1 %>% select(all_of(int_fields)) %>%
mutate_if(is.character,as.numeric)
ggplot(gather(curr_int), aes(value)) +
geom_histogram() +
facet_wrap(~key, scales = 'free')
curr_Voc <- Voc %>% filter(Questionnaire=="F1_NutritionMotorDev_yearI_Version2")
# Looking at int fields
int_fields <- curr_Voc %>% filter(data_type=="int") %>%
filter(variable_short_name != "inf_Age") %>%
filter(variable_short_name != "inf_AgeDays") %>%
filter(variable_short_name != "inf_AgeWeeks") %>%
filter(usability!="EMPTY") %>%
pull(variable_short_name)
curr_int <- Q5y1 %>% select(all_of(int_fields)) %>%
mutate_if(is.character,as.numeric)
ggplot(gather(curr_int), aes(value)) +
geom_histogram() +
facet_wrap(~key, scales = 'free')
# checking type of data
type_check <-  curr_int %>%
dplyr::summarise_all(class) %>%
tidyr::gather(variable, class)
shiny::runApp('Documents/UA_POSTDOC/CURE/interface_CURE/CURE_interface/shiny_app')
runApp('Documents/UA_POSTDOC/CURE/interface_CURE/CURE_interface/shiny_app')
setwd("~/Documents/UA_POSTDOC/CURE/interface_CURE/CURE_interface/shiny_app")
runApp()
runApp()
runApp()
runApp()
runApp()
datasetJL <- read_csv("../datasets/JL_raw_2020.csv")
display_dataset <- datasetJL %>% group_by(article_id, available) %>% tally()
View(display_dataset)
display_dataset  %>%  ggplot(aes(x="", y=n, fill=available)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void()
display_dataset <- datasetJL %>% group_by(available) %>% tally()
display_dataset  %>%  ggplot(aes(x="", y=n, fill=available)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void()
runApp()
datasetJL %>%  filter(article_year>=input$DB_year[1] && article_year<=input$DB_year[2]) %>%
select(-article_id)
test <- datasetJL %>%  filter(article_year>=2010 && article_year<=2020) %>%
select(-article_id)
View(datasetJL)
datasetJL$article_year <- as.numeric(datasetJL$article_year)
test <- datasetJL %>%  filter(article_year>=2010 && article_year<=2020)
test <- datasetJL %>%  filter(article_year>=2010)
test <- datasetJL %>%  filter(article_year>=2010 & article_year<=2020)
runApp()
View(datasetJL)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
# ----------------------------------
# load dataset
datasetJL <- read_csv("../datasets/JL_raw_2020.csv")
View(datasetJL)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(DT)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Documents/UA_POSTDOC/CURE/database_CURE/data_JL")
# load dataset
datasetJL <- read_csv("Imker_raw_2020.csv")
datasetJL$article_year <- as.numeric(datasetJL$article_year)
View(datasetJL)
#### database table
database <- datasetJL %>% select(db_id, resource_name, current_access, link_HTML, available, unavailable_message, available_update_date,
notes, article_year)
database <- database %>%
group_by(db_id) %>%
filter(article_year == max(article_year))
View(database)
write_csv(database, "JL_database_2018.csv")
### artivle table
article <- datasetJL %>% select(article_global_id, article_id, db_id, resource_name,
published_access, available, unavailable_message,
notes, article_year, citations)
### artivle table
article <- datasetJL %>% select(article_global_id, article_id, db_id, resource_name,
published_access, available, unavailable_message,
notes, article_year, citations) %>% unique()
write_csv(article, "JL_article_2018.csv")
# load dataset
datasetJL <- read_csv("Imker_raw_2020.csv")
datasetJL$article_year <- as.numeric(datasetJL$article_year)
#### database table
database <- datasetJL %>% select(db_id, resource_name, current_access, link_HTML, available, unavailable_message, available_update_date,
notes, article_year)
# load dataset
datasetJL <- read_csv("Imker_raw_2020.csv")
datasetJL$article_year <- as.numeric(datasetJL$article_year)
#### database table
database <- datasetJL %>% select(db_id, resource_name, current_access, link_HTML, available, unavailable_message, available_update_date,
notes, article_year)
View(database)
nb_article <- datasetJL %>% group_by(db_id) %>% tally() %>% rename("nb_articles"="n")
first_publi <- database %>%
group_by(db_id) %>%
filter(article_year == min(article_year)) %>% rename("year_first_publication"="article_year")
View(first_publi)
View(database)
View(first_publi)
first_publi <- database %>%
group_by(db_id) %>%
filter(article_year == min(article_year)) %>% rename("year_first_publication"="article_year") %>%
select(db_id, year_first_publication)
first_publi <- datasetJL %>%
group_by(db_id) %>%
filter(article_year == min(article_year)) %>% rename("year_first_publication"="article_year") %>%
select(db_id, year_first_publication)
total_citations <- datasetJL %>% group_by(db_id) %>% mutate(total_citation=sum(citations)) %>%
select(db_id, total_citation)
View(total_citations)
total_citations <- datasetJL %>% group_by(db_id) %>% mutate(total_citation=sum(citations)) %>%
select(db_id, total_citation) %>% unique()
database <- database %>%
group_by(db_id) %>%
filter(article_year == max(article_year)) %>% select(-article_year)
View(database)
# merge all infos
database  <- left_join(database, nb_article )
View(database)
# load dataset
datasetJL <- read_csv("Imker_raw_2020.csv")
datasetJL$article_year <- as.numeric(datasetJL$article_year)
#### database table
database <- datasetJL %>% select(db_id, resource_name, current_access, link_HTML, available, unavailable_message, available_update_date,
notes, article_year)
nb_article <- database %>% group_by(db_id) %>% tally() %>% rename("nb_articles"="n")
first_publi <- database %>%
group_by(db_id) %>%
filter(article_year == min(article_year)) %>% rename("year_first_publication"="article_year") %>%
select(db_id, year_first_publication)
total_citations <- database %>% group_by(db_id) %>% mutate(total_citation=sum(citations)) %>%
select(db_id, total_citation) %>% unique()
#### database table
database <- datasetJL
nb_article <- database %>% group_by(db_id) %>% tally() %>% rename("nb_articles"="n")
# load dataset
datasetJL <- read_csv("Imker_raw_2020.csv")
datasetJL$article_year <- as.numeric(datasetJL$article_year)
#### database table
database <- datasetJL
nb_article <- database %>% group_by(db_id) %>% tally() %>% rename("nb_articles"="n")
first_publi <- database %>%
group_by(db_id) %>%
filter(article_year == min(article_year)) %>% rename("year_first_publication"="article_year") %>%
select(db_id, year_first_publication)
total_citations <- database %>% group_by(db_id) %>% mutate(total_citation=sum(citations)) %>%
select(db_id, total_citation) %>% unique()
database <- database %>%
group_by(db_id) %>%
filter(article_year == max(article_year)) %>%
select(db_id, resource_name, current_access, link_HTML, available, unavailable_message, available_update_date,
notes, article_year)
test <- database %>% select(db_id) %>% unique()
View(database)
setdiff(database, total_citations)
database <- database %>%
group_by(db_id) %>%
filter(article_year == max(article_year)) %>%
select(db_id, resource_name, current_access, link_HTML, available, unavailable_message, available_update_date,
notes, article_year) %>% unique()
issue <- database %>% select(db_id)
issue2 <- total_citations %>% select(db_id)
setdiff(issue, issue2)
setdiff(issue2, issue)
View(issue)
View(issue2)
anti_join(database, total_citations)
duplicate <- database %>% filter(n()>1)
View(duplicate)
# load dataset
datasetJL <- read_csv("Imker_raw_2020.csv")
datasetJL$article_year <- as.numeric(datasetJL$article_year)
#### database table
database <- datasetJL
nb_article <- database %>% group_by(db_id) %>% tally() %>% rename("nb_articles"="n")
first_publi <- database %>%
group_by(db_id) %>%
filter(article_year == min(article_year)) %>% rename("year_first_publication"="article_year") %>%
select(db_id, year_first_publication)
total_citations <- database %>% group_by(db_id) %>% mutate(total_citation=sum(citations)) %>%
select(db_id, total_citation) %>% unique()
database <- database %>%
group_by(db_id) %>%
filter(article_year == max(article_year)) %>%
select(db_id, resource_name, current_access, link_HTML, available, unavailable_message, available_update_date,
notes, article_year) %>% unique()
duplicate <- database %>% filter(n()>1)
View(duplicate)
# load dataset
datasetJL <- read_csv("Imker_raw_2020.csv")
datasetJL$article_year <- as.numeric(datasetJL$article_year)
#### database table
database <- datasetJL
nb_article <- database %>% group_by(db_id) %>% tally() %>% rename("nb_articles"="n")
first_publi <- database %>%
group_by(db_id) %>%
filter(article_year == min(article_year)) %>% rename("year_first_publication"="article_year") %>%
select(db_id, year_first_publication)
total_citations <- database %>% group_by(db_id) %>% mutate(total_citation=sum(citations)) %>%
select(db_id, total_citation) %>% unique()
database <- database %>%
group_by(db_id) %>%
filter(article_year == max(article_year)) %>%
select(db_id, resource_name, current_access, link_HTML, available, unavailable_message, available_update_date,
notes, article_year) %>% unique()
# merge all infos
database  <- left_join(database, nb_article )
database  <- left_join(database, first_publi)
database  <- left_join(database, total_citations)
View(database)
duplicate <- database %>% filter(n()>1)
View(duplicate)
# load dataset
datasetJL <- read_csv("Imker_raw_2020.csv")
datasetJL$article_year <- as.numeric(datasetJL$article_year)
#### database table
database <- datasetJL
nb_article <- database %>% group_by(db_id) %>% tally() %>% rename("nb_articles"="n")
first_publi <- database %>%
group_by(db_id) %>%
filter(article_year == min(article_year)) %>% rename("year_first_publication"="article_year") %>%
select(db_id, year_first_publication)
total_citations <- database %>% group_by(db_id) %>% mutate(total_citation=sum(citations)) %>%
select(db_id, total_citation) %>% unique()
database <- database %>%
group_by(db_id) %>%
filter(article_year == max(article_year)) %>%
select(db_id, resource_name, current_access, link_HTML, available, unavailable_message, available_update_date,
notes, article_year) %>% unique()
duplicate <- database %>% filter(n()>1)
View(duplicate)
# load dataset
datasetJL <- read_csv("Imker_raw_2020.csv")
datasetJL$article_year <- as.numeric(datasetJL$article_year)
#### database table
database <- datasetJL
nb_article <- database %>% group_by(db_id) %>% tally() %>% rename("nb_articles"="n")
first_publi <- database %>%
group_by(db_id) %>%
filter(article_year == min(article_year)) %>% rename("year_first_publication"="article_year") %>%
select(db_id, year_first_publication)
total_citations <- database %>% group_by(db_id) %>% mutate(total_citation=sum(citations)) %>%
select(db_id, total_citation) %>% unique()
database <- database %>%
group_by(db_id) %>%
filter(article_year == max(article_year)) %>%
select(db_id, resource_name, current_access, link_HTML, available, unavailable_message, available_update_date,
notes, article_year) %>% unique()
duplicate <- database %>% filter(n()>1)
# merge all infos
database  <- left_join(database, nb_article )
database  <- left_join(database, first_publi)
database  <- left_join(database, total_citations)
write_csv(database, "JL_database_2018.csv")
### article table
article <- datasetJL %>% select(article_global_id, article_id, db_id, resource_name,
published_access, available, unavailable_message,
notes, article_year, citations) %>% unique()
write_csv(article, "JL_article_2018.csv")
# ----------------------------------
# load dataset
datasetJL <- read_csv("../datasets/JL_database_2018.csv")
datasetJL$article_year <- as.numeric(datasetJL$article_year)
setwd("~/Documents/UA_POSTDOC/CURE/CURE_interface/shiny_app")
# ----------------------------------
# load dataset
datasetJL <- read_csv("../datasets/JL_database_2018.csv")
datasetJL$article_year <- as.numeric(datasetJL$article_year)
View(datasetJL)
View(datasetJL)
runApp()
runApp()
runApp()
View(datasetJL)
runApp()
runApp()
runApp()
View(datasetJL)
runApp()
View(datasetJL)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
